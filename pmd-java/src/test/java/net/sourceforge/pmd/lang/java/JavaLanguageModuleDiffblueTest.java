package net.sourceforge.pmd.lang.java;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.cpd.CpdLexer;
import net.sourceforge.pmd.cpd.TokenFactory;
import net.sourceforge.pmd.lang.JvmLanguagePropertyBundle;
import net.sourceforge.pmd.lang.Language;
import net.sourceforge.pmd.lang.LanguageProcessor;
import net.sourceforge.pmd.lang.LanguagePropertyBundle;

import net.sourceforge.pmd.lang.LanguageVersion;
import net.sourceforge.pmd.lang.PmdCapableLanguage;
import net.sourceforge.pmd.lang.document.Chars;
import net.sourceforge.pmd.lang.document.TextDocument;
import net.sourceforge.pmd.lang.java.ast.JavaParser;
import net.sourceforge.pmd.lang.java.cpd.JavaCpdLexer;
import net.sourceforge.pmd.lang.java.internal.JavaDesignerBindings;
import net.sourceforge.pmd.lang.java.internal.JavaLanguageProcessor;
import net.sourceforge.pmd.lang.java.internal.JavaLanguageProperties;
import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;
import net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol;
import net.sourceforge.pmd.lang.java.symbols.SymbolicValue;
import net.sourceforge.pmd.lang.java.types.JClassType;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JWildcardType;
import net.sourceforge.pmd.lang.java.types.TypeSystem;
import net.sourceforge.pmd.properties.PropertyDescriptor;
import net.sourceforge.pmd.reporting.ViolationSuppressor;
import org.junit.jupiter.api.Test;
import org.pcollections.ConsPStack;
import org.pcollections.MapPSet;
import org.pcollections.PSet;

class JavaLanguageModuleDiffblueTest {
    /**
     * Method under test: {@link JavaLanguageModule#getInstance()}
     */
    @Test
    void testGetInstance() {
        // Arrange and Act
        JavaLanguageModule actualInstance = JavaLanguageModule.getInstance();

        // Assert
        List<LanguageVersion> versions = actualInstance.getVersions();
        assertEquals(23, versions.size());
        LanguageVersion getResult = versions.get(0);
        assertEquals("1.3", getResult.getVersion());
        LanguageVersion getResult2 = versions.get(1);
        assertEquals("1.4", getResult2.getVersion());
        LanguageVersion getResult3 = versions.get(2);
        assertEquals("1.5", getResult3.getVersion());
        LanguageVersion getResult4 = versions.get(20);
        assertEquals("22-preview", getResult4.getVersion());
        LanguageVersion defaultVersion = actualInstance.getDefaultVersion();
        assertEquals("23", defaultVersion.getVersion());
        LanguageVersion latestVersion = actualInstance.getLatestVersion();
        assertEquals("23-preview", latestVersion.getVersion());
        assertEquals("Java 1.3", getResult.getName());
        assertEquals("Java 1.3", getResult.getShortName());
        assertEquals("Java 1.4", getResult2.getName());
        assertEquals("Java 1.4", getResult2.getShortName());
        assertEquals("Java 1.5", getResult3.getName());
        assertEquals("Java 1.5", getResult3.getShortName());
        assertEquals("Java 22-preview", getResult4.getName());
        assertEquals("Java 22-preview", getResult4.getShortName());
        assertEquals("Java 23", defaultVersion.getName());
        assertEquals("Java 23", defaultVersion.getShortName());
        assertEquals("Java 23-preview", latestVersion.getName());
        assertEquals("Java 23-preview", latestVersion.getShortName());
        assertEquals("Java", actualInstance.getName());
        assertEquals("Java", actualInstance.getShortName());
        assertEquals("java 1.3", getResult.getTerseName());
        assertEquals("java 1.4", getResult2.getTerseName());
        assertEquals("java 1.5", getResult3.getTerseName());
        assertEquals("java 22-preview", getResult4.getTerseName());
        assertEquals("java 23", defaultVersion.getTerseName());
        assertEquals("java 23-preview", latestVersion.getTerseName());
        List<String> extensions = actualInstance.getExtensions();
        assertEquals(1, extensions.size());
        assertEquals("java", extensions.get(0));
        assertEquals("java", actualInstance.getId());
        Set<String> versionNamesAndAliases = actualInstance.getVersionNamesAndAliases();
        assertEquals(29, versionNamesAndAliases.size());
        assertTrue(versionNamesAndAliases.contains("10"));
        assertTrue(versionNamesAndAliases.contains("11"));
        assertTrue(versionNamesAndAliases.contains("12"));
        assertTrue(versionNamesAndAliases.contains("13"));
        assertTrue(versionNamesAndAliases.contains("22"));
        assertTrue(versionNamesAndAliases.contains("23"));
        assertTrue(actualInstance.getDependencies().isEmpty());
        assertSame(latestVersion, versions.get(22));
        assertSame(defaultVersion, versions.get(21));
        assertSame(actualInstance, getResult.getLanguage());
        assertSame(actualInstance, getResult2.getLanguage());
        assertSame(actualInstance, getResult3.getLanguage());
        assertSame(actualInstance, getResult4.getLanguage());
        assertSame(actualInstance, latestVersion.getLanguage());
        assertSame(actualInstance, defaultVersion.getLanguage());
    }

    /**
     * Method under test: {@link JavaLanguageModule#newPropertyBundle()}
     */
    @Test
    void testNewPropertyBundle() {
        // Arrange
        JavaLanguageModule javaLanguageModule = new JavaLanguageModule();

        // Act
        LanguagePropertyBundle actualNewPropertyBundleResult = javaLanguageModule.newPropertyBundle();

        // Assert
        Language language = actualNewPropertyBundleResult.getLanguage();
        assertTrue(language instanceof JavaLanguageModule);
        assertTrue(actualNewPropertyBundleResult instanceof JavaLanguageProperties);
        LanguageVersion languageVersion = actualNewPropertyBundleResult.getLanguageVersion();
        assertEquals("23", languageVersion.getVersion());
        List<PropertyDescriptor<?>> propertyDescriptors = actualNewPropertyBundleResult.getPropertyDescriptors();
        assertEquals(8, propertyDescriptors.size());
        PropertyDescriptor<?> getResult = propertyDescriptors.get(6);
        assertEquals("Anonymize identifiers. They are still part of the token stream but all identifiers appear to have the"
                + " same value.", getResult.description());
        PropertyDescriptor<?> getResult2 = propertyDescriptors.get(7);
        assertEquals("Anonymize literals. They are still part of the token stream but all literals appear to have the"
                + " same value.", getResult2.description());
        PropertyDescriptor<?> getResult3 = propertyDescriptors.get(5);
        assertEquals("Ignore metadata such as Java annotations or C# attributes.", getResult3.description());
        assertEquals("Java 23", languageVersion.getName());
        assertEquals("Java 23", languageVersion.getShortName());
        assertEquals("Java", actualNewPropertyBundleResult.getName());
        PropertyDescriptor<?> getResult4 = propertyDescriptors.get(1);
        assertEquals("Language version to use for this language. See the --use-version CLI switch as well.",
                getResult4.description());
        assertEquals("NOPMD", actualNewPropertyBundleResult.getSuppressMarker());
        assertEquals("cpdAnonymizeIdentifiers", getResult.name());
        assertEquals("cpdAnonymizeLiterals", getResult2.name());
        assertEquals("cpdIgnoreMetadata", getResult3.name());
        assertEquals("java 23", languageVersion.getTerseName());
        assertEquals("version", getResult4.name());
        assertNotNull(((JavaLanguageProperties) actualNewPropertyBundleResult).getAnalysisClassLoader());
        assertEquals(8, actualNewPropertyBundleResult.getPropertiesByPropertyDescriptor().size());
        assertFalse(getResult4.isXPathAvailable());
        assertTrue(actualNewPropertyBundleResult.getOverriddenPropertyDescriptors().isEmpty());
        assertTrue(actualNewPropertyBundleResult.getOverriddenPropertiesByPropertyDescriptor().isEmpty());
        assertEquals(javaLanguageModule, language);
        assertSame(languageVersion, getResult4.defaultValue());
        assertSame(((JvmLanguagePropertyBundle) actualNewPropertyBundleResult).AUX_CLASSPATH, propertyDescriptors.get(2));
        assertSame(actualNewPropertyBundleResult.SUPPRESS_MARKER, propertyDescriptors.get(0));
        assertSame(language, languageVersion.getLanguage());
    }

    /**
     * Method under test:
     * {@link JavaLanguageModule#createProcessor(LanguagePropertyBundle)}
     */
    @Test
    void testCreateProcessor() {
        // Arrange
        JavaLanguageModule javaLanguageModule = new JavaLanguageModule();
        JavaLanguageProperties bundle = new JavaLanguageProperties();

        // Act
        LanguageProcessor actualCreateProcessorResult = javaLanguageModule.createProcessor(bundle);

        // Assert
        PmdCapableLanguage language = actualCreateProcessorResult.getLanguage();
        assertTrue(language instanceof JavaLanguageModule);
        assertTrue(((JavaLanguageProcessor) actualCreateProcessorResult).getParser() instanceof JavaParser);
        assertTrue(
                ((JavaLanguageProcessor) actualCreateProcessorResult).getDesignerBindings() instanceof JavaDesignerBindings);
        assertTrue(actualCreateProcessorResult instanceof JavaLanguageProcessor);
        List<ViolationSuppressor> extraViolationSuppressors = ((JavaLanguageProcessor) actualCreateProcessorResult)
                .getExtraViolationSuppressors();
        assertEquals(1, extraViolationSuppressors.size());
        assertTrue(extraViolationSuppressors instanceof ConsPStack);
        TypeSystem typeSystem = ((JavaLanguageProcessor) actualCreateProcessorResult).getTypeSystem();
        JPrimitiveType jPrimitiveType = typeSystem.CHAR;
        JClassType boxResult = jPrimitiveType.box();
        List<JMethodSig> constructors = boxResult.getConstructors();
        assertEquals(1, constructors.size());
        assertTrue(constructors instanceof ConsPStack);
        JClassType jClassType = typeSystem.BOXED_VOID;
        List<JMethodSig> constructors2 = jClassType.getConstructors();
        assertEquals(1, constructors2.size());
        assertTrue(constructors2 instanceof ConsPStack);
        JClassType jClassType2 = typeSystem.CLONEABLE;
        List<JMethodSig> constructors3 = jClassType2.getConstructors();
        assertTrue(constructors3 instanceof ConsPStack);
        JClassType jClassType3 = typeSystem.OBJECT;
        List<JMethodSig> constructors4 = jClassType3.getConstructors();
        assertEquals(1, constructors4.size());
        assertTrue(constructors4 instanceof ConsPStack);
        JPrimitiveType jPrimitiveType2 = typeSystem.BOOLEAN;
        JClassType boxResult2 = jPrimitiveType2.box();
        JClassSymbol symbol = boxResult2.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations = symbol.getDeclaredAnnotations();
        assertTrue(declaredAnnotations instanceof MapPSet);
        JPrimitiveType jPrimitiveType3 = typeSystem.BYTE;
        JClassType boxResult3 = jPrimitiveType3.box();
        JClassSymbol symbol2 = boxResult3.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations2 = symbol2.getDeclaredAnnotations();
        assertTrue(declaredAnnotations2 instanceof MapPSet);
        JClassSymbol symbol3 = boxResult.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations3 = symbol3.getDeclaredAnnotations();
        assertTrue(declaredAnnotations3 instanceof MapPSet);
        JPrimitiveType jPrimitiveType4 = typeSystem.DOUBLE;
        JClassType boxResult4 = jPrimitiveType4.box();
        JClassSymbol symbol4 = boxResult4.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations4 = symbol4.getDeclaredAnnotations();
        assertTrue(declaredAnnotations4 instanceof MapPSet);
        JPrimitiveType jPrimitiveType5 = typeSystem.FLOAT;
        JClassType boxResult5 = jPrimitiveType5.box();
        JClassSymbol symbol5 = boxResult5.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations5 = symbol5.getDeclaredAnnotations();
        assertTrue(declaredAnnotations5 instanceof MapPSet);
        JPrimitiveType jPrimitiveType6 = typeSystem.INT;
        JClassType boxResult6 = jPrimitiveType6.box();
        JClassSymbol symbol6 = boxResult6.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations6 = symbol6.getDeclaredAnnotations();
        assertTrue(declaredAnnotations6 instanceof MapPSet);
        JPrimitiveType jPrimitiveType7 = typeSystem.LONG;
        JClassType boxResult7 = jPrimitiveType7.box();
        JClassSymbol symbol7 = boxResult7.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations7 = symbol7.getDeclaredAnnotations();
        assertTrue(declaredAnnotations7 instanceof MapPSet);
        JPrimitiveType jPrimitiveType8 = typeSystem.SHORT;
        JClassType boxResult8 = jPrimitiveType8.box();
        JClassSymbol symbol8 = boxResult8.getSymbol();
        PSet<SymbolicValue.SymAnnot> declaredAnnotations8 = symbol8.getDeclaredAnnotations();
        assertTrue(declaredAnnotations8 instanceof MapPSet);
        PSet<SymbolicValue.SymAnnot> typeAnnotations = jPrimitiveType2.getTypeAnnotations();
        assertTrue(typeAnnotations instanceof MapPSet);
        JMethodSig jMethodSig = typeSystem.UNRESOLVED_METHOD;
        assertEquals("(*unknown method*)", jMethodSig.getName());
        LanguageVersion languageVersion = actualCreateProcessorResult.getLanguageVersion();
        assertEquals("23", languageVersion.getVersion());
        assertEquals("Java 23", languageVersion.getName());
        assertEquals("Java 23", languageVersion.getShortName());
        assertEquals("boolean", jPrimitiveType2.getSimpleName());
        assertEquals("byte", jPrimitiveType3.getSimpleName());
        assertEquals("char", jPrimitiveType.getSimpleName());
        assertEquals("double", jPrimitiveType4.getSimpleName());
        assertEquals("float", jPrimitiveType5.getSimpleName());
        assertEquals("int", jPrimitiveType6.getSimpleName());
        assertEquals("java 23", languageVersion.getTerseName());
        assertEquals("long", jPrimitiveType7.getSimpleName());
        List<JMethodSig> constructors5 = boxResult2.getConstructors();
        assertEquals(2, constructors5.size());
        JMethodSig getResult = constructors5.get(0);
        assertEquals("new", getResult.getName());
        JMethodSig getResult2 = constructors5.get(1);
        assertEquals("new", getResult2.getName());
        List<JMethodSig> constructors6 = boxResult3.getConstructors();
        assertEquals(2, constructors6.size());
        JMethodSig getResult3 = constructors6.get(0);
        assertEquals("new", getResult3.getName());
        JMethodSig getResult4 = constructors6.get(1);
        assertEquals("new", getResult4.getName());
        List<JMethodSig> constructors7 = boxResult4.getConstructors();
        assertEquals(2, constructors7.size());
        JMethodSig getResult5 = constructors7.get(0);
        assertEquals("new", getResult5.getName());
        JMethodSig getResult6 = constructors2.get(0);
        assertEquals("new", getResult6.getName());
        assertEquals("short", jPrimitiveType8.getSimpleName());
        assertNull(symbol.getAnnotationRetention());
        assertNull(symbol2.getAnnotationRetention());
        assertNull(symbol3.getAnnotationRetention());
        assertNull(symbol4.getAnnotationRetention());
        assertNull(symbol5.getAnnotationRetention());
        assertNull(symbol6.getAnnotationRetention());
        assertNull(symbol7.getAnnotationRetention());
        assertNull(symbol8.getAnnotationRetention());
        JClassSymbol symbol9 = jClassType.getSymbol();
        assertNull(symbol9.getAnnotationRetention());
        JClassSymbol symbol10 = jClassType2.getSymbol();
        assertNull(symbol10.getAnnotationRetention());
        JClassSymbol symbol11 = jClassType3.getSymbol();
        assertNull(symbol11.getAnnotationRetention());
        JClassType jClassType4 = typeSystem.SERIALIZABLE;
        JClassSymbol symbol12 = jClassType4.getSymbol();
        assertNull(symbol12.getAnnotationRetention());
        JClassSymbol symbol13 = jPrimitiveType2.getSymbol();
        assertNull(symbol13.getAnnotationRetention());
        JClassSymbol symbol14 = jPrimitiveType3.getSymbol();
        assertNull(symbol14.getAnnotationRetention());
        JClassSymbol symbol15 = jPrimitiveType.getSymbol();
        assertNull(symbol15.getAnnotationRetention());
        JClassSymbol symbol16 = jPrimitiveType4.getSymbol();
        assertNull(symbol16.getAnnotationRetention());
        JClassSymbol symbol17 = jPrimitiveType5.getSymbol();
        assertNull(symbol17.getAnnotationRetention());
        JClassSymbol symbol18 = jPrimitiveType6.getSymbol();
        assertNull(symbol18.getAnnotationRetention());
        JClassSymbol symbol19 = jPrimitiveType7.getSymbol();
        assertNull(symbol19.getAnnotationRetention());
        JClassSymbol symbol20 = jPrimitiveType8.getSymbol();
        assertNull(symbol20.getAnnotationRetention());
        JTypeMirror jTypeMirror = typeSystem.NULL_TYPE;
        assertNull(jTypeMirror.getSymbol());
        JWildcardType jWildcardType = typeSystem.UNBOUNDED_WILD;
        assertNull(jWildcardType.getSymbol());
        assertNull(symbol.getEnclosingTypeParameterOwner());
        assertNull(symbol2.getEnclosingTypeParameterOwner());
        assertNull(symbol3.getEnclosingTypeParameterOwner());
        assertNull(symbol4.getEnclosingTypeParameterOwner());
        assertNull(symbol5.getEnclosingTypeParameterOwner());
        assertNull(symbol6.getEnclosingTypeParameterOwner());
        assertNull(symbol7.getEnclosingTypeParameterOwner());
        assertNull(symbol8.getEnclosingTypeParameterOwner());
        assertNull(symbol9.getEnclosingTypeParameterOwner());
        assertNull(symbol10.getEnclosingTypeParameterOwner());
        assertNull(symbol11.getEnclosingTypeParameterOwner());
        assertNull(symbol12.getEnclosingTypeParameterOwner());
        assertNull(symbol13.getEnclosingTypeParameterOwner());
        assertNull(symbol14.getEnclosingTypeParameterOwner());
        assertNull(symbol15.getEnclosingTypeParameterOwner());
        assertNull(symbol16.getEnclosingTypeParameterOwner());
        assertNull(symbol17.getEnclosingTypeParameterOwner());
        assertNull(symbol18.getEnclosingTypeParameterOwner());
        assertNull(symbol19.getEnclosingTypeParameterOwner());
        assertNull(symbol20.getEnclosingTypeParameterOwner());
        assertEquals(0, symbol.getTypeParameterCount());
        assertEquals(0, symbol2.getTypeParameterCount());
        assertEquals(0, symbol3.getTypeParameterCount());
        assertEquals(0, symbol4.getTypeParameterCount());
        assertEquals(0, symbol5.getTypeParameterCount());
        assertEquals(0, symbol6.getTypeParameterCount());
        assertEquals(0, symbol7.getTypeParameterCount());
        assertEquals(0, symbol8.getTypeParameterCount());
        assertEquals(0, symbol9.getTypeParameterCount());
        assertEquals(0, symbol10.getTypeParameterCount());
        assertEquals(0, symbol11.getTypeParameterCount());
        assertEquals(0, symbol12.getTypeParameterCount());
        assertEquals(0, symbol13.getTypeParameterCount());
        assertEquals(0, symbol14.getTypeParameterCount());
        assertEquals(0, symbol15.getTypeParameterCount());
        assertEquals(0, symbol16.getTypeParameterCount());
        assertEquals(0, symbol17.getTypeParameterCount());
        assertEquals(0, symbol18.getTypeParameterCount());
        assertEquals(0, symbol19.getTypeParameterCount());
        assertEquals(0, symbol20.getTypeParameterCount());
        assertEquals(0, getResult6.getArity());
        assertEquals(0, jMethodSig.getArity());
        assertEquals(1, jPrimitiveType2.getSuperTypeSet().size());
        assertEquals(1, jPrimitiveType4.getSuperTypeSet().size());
        JTypeMirror jTypeMirror2 = typeSystem.ERROR;
        assertEquals(1, jTypeMirror2.getSuperTypeSet().size());
        JTypeMirror jTypeMirror3 = typeSystem.NO_TYPE;
        assertEquals(1, jTypeMirror3.getSuperTypeSet().size());
        assertEquals(1, jClassType3.getSuperTypeSet().size());
        assertEquals(1, jWildcardType.getSuperTypeSet().size());
        JTypeMirror jTypeMirror4 = typeSystem.UNKNOWN;
        assertEquals(1, jTypeMirror4.getSuperTypeSet().size());
        assertEquals(1, getResult.getArity());
        assertEquals(1, getResult2.getArity());
        assertEquals(1, getResult3.getArity());
        assertEquals(1, getResult4.getArity());
        assertEquals(1, getResult5.getArity());
        assertEquals(1, jMethodSig.getModifiers());
        assertEquals(131073, getResult.getModifiers());
        assertEquals(131073, getResult2.getModifiers());
        assertEquals(131073, getResult3.getModifiers());
        assertEquals(131073, getResult4.getModifiers());
        assertEquals(131073, getResult5.getModifiers());
        assertEquals(2, boxResult6.getConstructors().size());
        assertEquals(2, boxResult7.getConstructors().size());
        assertEquals(2, boxResult8.getConstructors().size());
        assertEquals(2, jPrimitiveType5.getSuperTypeSet().size());
        assertEquals(2, jClassType.getSuperTypeSet().size());
        assertEquals(2, jClassType2.getSuperTypeSet().size());
        assertEquals(2, jClassType4.getSuperTypeSet().size());
        assertEquals(2, getResult6.getModifiers());
        assertEquals(3, boxResult5.getConstructors().size());
        assertEquals(3, jPrimitiveType7.getSuperTypeSet().size());
        assertEquals(4, jPrimitiveType6.getSuperTypeSet().size());
        assertEquals(5, jPrimitiveType.getSuperTypeSet().size());
        assertEquals(5, jPrimitiveType8.getSuperTypeSet().size());
        assertEquals(5, boxResult2.getSuperTypeSet().size());
        assertEquals(5, boxResult.getSuperTypeSet().size());
        assertEquals(6, jPrimitiveType3.getSuperTypeSet().size());
        assertEquals(6, boxResult3.getSuperTypeSet().size());
        assertEquals(6, boxResult8.getSuperTypeSet().size());
        assertEquals(7, boxResult4.getSuperTypeSet().size());
        assertEquals(7, boxResult5.getSuperTypeSet().size());
        assertEquals(7, boxResult6.getSuperTypeSet().size());
        assertEquals(7, boxResult7.getSuperTypeSet().size());
        assertEquals(8, typeSystem.allPrimitives.size());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.BOOLEAN, jPrimitiveType2.getKind());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.BYTE, jPrimitiveType3.getKind());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.CHAR, jPrimitiveType.getKind());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.DOUBLE, jPrimitiveType4.getKind());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.FLOAT, jPrimitiveType5.getKind());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.INT, jPrimitiveType6.getKind());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.LONG, jPrimitiveType7.getKind());
        assertEquals(JPrimitiveType.PrimitiveTypeKind.SHORT, jPrimitiveType8.getKind());
        assertFalse(jClassType.isGeneric());
        assertFalse(jClassType2.isGeneric());
        assertFalse(jClassType3.isGeneric());
        assertFalse(jClassType4.isGeneric());
        assertFalse(jClassType.isGenericTypeDeclaration());
        assertFalse(jClassType2.isGenericTypeDeclaration());
        assertFalse(jClassType3.isGenericTypeDeclaration());
        assertFalse(jClassType4.isGenericTypeDeclaration());
        assertFalse(jClassType.isRaw());
        assertFalse(jClassType2.isRaw());
        assertFalse(jClassType3.isRaw());
        assertFalse(jClassType4.isRaw());
        assertFalse(jMethodSig.isAbstract());
        assertFalse(jMethodSig.isConstructor());
        assertFalse(jMethodSig.isGeneric());
        assertFalse(jMethodSig.isStatic());
        assertFalse(jMethodSig.isVarargs());
        assertFalse(jPrimitiveType2.isFloatingPoint());
        assertFalse(jPrimitiveType3.isFloatingPoint());
        assertFalse(jPrimitiveType.isFloatingPoint());
        assertFalse(jPrimitiveType6.isFloatingPoint());
        assertFalse(jPrimitiveType7.isFloatingPoint());
        assertFalse(jPrimitiveType8.isFloatingPoint());
        assertFalse(jPrimitiveType2.isIntegral());
        assertFalse(jPrimitiveType4.isIntegral());
        assertFalse(jPrimitiveType5.isIntegral());
        assertFalse(jPrimitiveType2.isNumeric());
        assertFalse(jPrimitiveType2.isArray());
        assertFalse(jClassType.isArray());
        assertFalse(jPrimitiveType3.isArray());
        assertFalse(jPrimitiveType.isArray());
        assertFalse(jClassType2.isArray());
        assertFalse(jPrimitiveType4.isArray());
        assertFalse(jTypeMirror2.isArray());
        assertFalse(jPrimitiveType5.isArray());
        assertFalse(jPrimitiveType6.isArray());
        assertFalse(jPrimitiveType7.isArray());
        assertFalse(jTypeMirror3.isArray());
        assertFalse(jTypeMirror.isArray());
        assertFalse(jClassType3.isArray());
        assertFalse(jClassType4.isArray());
        assertFalse(jPrimitiveType8.isArray());
        assertFalse(jWildcardType.isArray());
        assertFalse(jTypeMirror4.isArray());
        assertFalse(jPrimitiveType2.isBottom());
        assertFalse(jClassType.isBottom());
        assertFalse(jPrimitiveType3.isBottom());
        assertFalse(jPrimitiveType.isBottom());
        assertFalse(jClassType2.isBottom());
        assertFalse(jPrimitiveType4.isBottom());
        assertFalse(jTypeMirror2.isBottom());
        assertFalse(jPrimitiveType5.isBottom());
        assertFalse(jPrimitiveType6.isBottom());
        assertFalse(jPrimitiveType7.isBottom());
        assertFalse(jTypeMirror3.isBottom());
        assertFalse(jClassType3.isBottom());
        assertFalse(jClassType4.isBottom());
        assertFalse(jPrimitiveType8.isBottom());
        assertFalse(jWildcardType.isBottom());
        assertFalse(jTypeMirror4.isBottom());
        assertFalse(jPrimitiveType2.isBoxedPrimitive());
        assertFalse(jClassType.isBoxedPrimitive());
        assertFalse(jPrimitiveType3.isBoxedPrimitive());
        assertFalse(jPrimitiveType.isBoxedPrimitive());
        assertFalse(jClassType2.isBoxedPrimitive());
        assertFalse(jPrimitiveType4.isBoxedPrimitive());
        assertFalse(jTypeMirror2.isBoxedPrimitive());
        assertFalse(jPrimitiveType5.isBoxedPrimitive());
        assertFalse(jPrimitiveType6.isBoxedPrimitive());
        assertFalse(jPrimitiveType7.isBoxedPrimitive());
        assertFalse(jTypeMirror3.isBoxedPrimitive());
        assertFalse(jTypeMirror.isBoxedPrimitive());
        assertFalse(jClassType3.isBoxedPrimitive());
        assertFalse(jClassType4.isBoxedPrimitive());
        assertFalse(jPrimitiveType8.isBoxedPrimitive());
        assertFalse(jWildcardType.isBoxedPrimitive());
        assertFalse(jTypeMirror4.isBoxedPrimitive());
        assertFalse(jPrimitiveType2.isClassOrInterface());
        assertFalse(jPrimitiveType3.isClassOrInterface());
        assertFalse(jPrimitiveType.isClassOrInterface());
        assertFalse(jPrimitiveType4.isClassOrInterface());
        assertFalse(jTypeMirror2.isClassOrInterface());
        assertFalse(jPrimitiveType5.isClassOrInterface());
        assertFalse(jPrimitiveType6.isClassOrInterface());
        assertFalse(jPrimitiveType7.isClassOrInterface());
        assertFalse(jTypeMirror3.isClassOrInterface());
        assertFalse(jTypeMirror.isClassOrInterface());
        assertFalse(jPrimitiveType8.isClassOrInterface());
        assertFalse(jWildcardType.isClassOrInterface());
        assertFalse(jTypeMirror4.isClassOrInterface());
        assertFalse(jClassType.isFloatingPoint());
        assertFalse(jClassType2.isFloatingPoint());
        assertFalse(jTypeMirror2.isFloatingPoint());
        assertFalse(jTypeMirror3.isFloatingPoint());
        assertFalse(jTypeMirror.isFloatingPoint());
        assertFalse(jClassType3.isFloatingPoint());
        assertFalse(jClassType4.isFloatingPoint());
        assertFalse(jWildcardType.isFloatingPoint());
        assertFalse(jTypeMirror4.isFloatingPoint());
        assertFalse(jPrimitiveType2.isGeneric());
        assertFalse(jPrimitiveType3.isGeneric());
        assertFalse(jPrimitiveType.isGeneric());
        assertFalse(jPrimitiveType4.isGeneric());
        assertFalse(jTypeMirror2.isGeneric());
        assertFalse(jPrimitiveType5.isGeneric());
        assertFalse(jPrimitiveType6.isGeneric());
        assertFalse(jPrimitiveType7.isGeneric());
        assertFalse(jTypeMirror3.isGeneric());
        assertFalse(jTypeMirror.isGeneric());
        assertFalse(jPrimitiveType8.isGeneric());
        assertFalse(jWildcardType.isGeneric());
        assertFalse(jTypeMirror4.isGeneric());
        assertFalse(jPrimitiveType2.isGenericTypeDeclaration());
        assertFalse(jPrimitiveType3.isGenericTypeDeclaration());
        assertFalse(jPrimitiveType.isGenericTypeDeclaration());
        assertFalse(jPrimitiveType4.isGenericTypeDeclaration());
        assertFalse(jTypeMirror2.isGenericTypeDeclaration());
        assertFalse(jPrimitiveType5.isGenericTypeDeclaration());
        assertFalse(jPrimitiveType6.isGenericTypeDeclaration());
        assertFalse(jPrimitiveType7.isGenericTypeDeclaration());
        assertFalse(jTypeMirror3.isGenericTypeDeclaration());
        assertFalse(jTypeMirror.isGenericTypeDeclaration());
        assertFalse(jPrimitiveType8.isGenericTypeDeclaration());
        assertFalse(jWildcardType.isGenericTypeDeclaration());
        assertFalse(jTypeMirror4.isGenericTypeDeclaration());
        assertFalse(jClassType.isIntegral());
        assertFalse(jClassType2.isIntegral());
        assertFalse(jTypeMirror2.isIntegral());
        assertFalse(jTypeMirror3.isIntegral());
        assertFalse(jTypeMirror.isIntegral());
        assertFalse(jClassType3.isIntegral());
        assertFalse(jClassType4.isIntegral());
        assertFalse(jWildcardType.isIntegral());
        assertFalse(jTypeMirror4.isIntegral());
        assertFalse(jPrimitiveType2.isInterface());
        assertFalse(jClassType.isInterface());
        assertFalse(jPrimitiveType3.isInterface());
        assertFalse(jPrimitiveType.isInterface());
        assertFalse(jPrimitiveType4.isInterface());
        assertFalse(jTypeMirror2.isInterface());
        assertFalse(jPrimitiveType5.isInterface());
        assertFalse(jPrimitiveType6.isInterface());
        assertFalse(jPrimitiveType7.isInterface());
        assertFalse(jTypeMirror3.isInterface());
        assertFalse(jTypeMirror.isInterface());
        assertFalse(jClassType3.isInterface());
        assertFalse(jPrimitiveType8.isInterface());
        assertFalse(jWildcardType.isInterface());
        assertFalse(jTypeMirror4.isInterface());
        assertFalse(jClassType.isNumeric());
        assertFalse(jClassType2.isNumeric());
        assertFalse(jTypeMirror2.isNumeric());
        assertFalse(jTypeMirror3.isNumeric());
        assertFalse(jTypeMirror.isNumeric());
        assertFalse(jClassType3.isNumeric());
        assertFalse(jClassType4.isNumeric());
        assertFalse(jWildcardType.isNumeric());
        assertFalse(jTypeMirror4.isNumeric());
        assertFalse(jPrimitiveType2.isParameterizedType());
        assertFalse(jClassType.isParameterizedType());
        assertFalse(jPrimitiveType3.isParameterizedType());
        assertFalse(jPrimitiveType.isParameterizedType());
        assertFalse(jClassType2.isParameterizedType());
        assertFalse(jPrimitiveType4.isParameterizedType());
        assertFalse(jTypeMirror2.isParameterizedType());
        assertFalse(jPrimitiveType5.isParameterizedType());
        assertFalse(jPrimitiveType6.isParameterizedType());
        assertFalse(jPrimitiveType7.isParameterizedType());
        assertFalse(jTypeMirror3.isParameterizedType());
        assertFalse(jTypeMirror.isParameterizedType());
        assertFalse(jClassType3.isParameterizedType());
        assertFalse(jClassType4.isParameterizedType());
        assertFalse(jPrimitiveType8.isParameterizedType());
        assertFalse(jWildcardType.isParameterizedType());
        assertFalse(jTypeMirror4.isParameterizedType());
        assertFalse(jClassType.isPrimitive());
        assertFalse(jClassType2.isPrimitive());
        assertFalse(jTypeMirror2.isPrimitive());
        assertFalse(jTypeMirror3.isPrimitive());
        assertFalse(jTypeMirror.isPrimitive());
        assertFalse(jClassType3.isPrimitive());
        assertFalse(jClassType4.isPrimitive());
        assertFalse(jWildcardType.isPrimitive());
        assertFalse(jTypeMirror4.isPrimitive());
        assertFalse(jPrimitiveType2.isRaw());
        assertFalse(jPrimitiveType3.isRaw());
        assertFalse(jPrimitiveType.isRaw());
        assertFalse(jPrimitiveType4.isRaw());
        assertFalse(jTypeMirror2.isRaw());
        assertFalse(jPrimitiveType5.isRaw());
        assertFalse(jPrimitiveType6.isRaw());
        assertFalse(jPrimitiveType7.isRaw());
        assertFalse(jTypeMirror3.isRaw());
        assertFalse(jTypeMirror.isRaw());
        assertFalse(jPrimitiveType8.isRaw());
        assertFalse(jWildcardType.isRaw());
        assertFalse(jTypeMirror4.isRaw());
        assertFalse(jPrimitiveType2.isTop());
        assertFalse(jClassType.isTop());
        assertFalse(jPrimitiveType3.isTop());
        assertFalse(jPrimitiveType.isTop());
        assertFalse(jClassType2.isTop());
        assertFalse(jPrimitiveType4.isTop());
        assertFalse(jTypeMirror2.isTop());
        assertFalse(jPrimitiveType5.isTop());
        assertFalse(jPrimitiveType6.isTop());
        assertFalse(jPrimitiveType7.isTop());
        assertFalse(jTypeMirror3.isTop());
        assertFalse(jTypeMirror.isTop());
        assertFalse(jClassType4.isTop());
        assertFalse(jPrimitiveType8.isTop());
        assertFalse(jWildcardType.isTop());
        assertFalse(jTypeMirror4.isTop());
        assertFalse(jPrimitiveType2.isTypeVariable());
        assertFalse(jClassType.isTypeVariable());
        assertFalse(jPrimitiveType3.isTypeVariable());
        assertFalse(jPrimitiveType.isTypeVariable());
        assertFalse(jClassType2.isTypeVariable());
        assertFalse(jPrimitiveType4.isTypeVariable());
        assertFalse(jTypeMirror2.isTypeVariable());
        assertFalse(jPrimitiveType5.isTypeVariable());
        assertFalse(jPrimitiveType6.isTypeVariable());
        assertFalse(jPrimitiveType7.isTypeVariable());
        assertFalse(jTypeMirror3.isTypeVariable());
        assertFalse(jTypeMirror.isTypeVariable());
        assertFalse(jClassType3.isTypeVariable());
        assertFalse(jClassType4.isTypeVariable());
        assertFalse(jPrimitiveType8.isTypeVariable());
        assertFalse(jWildcardType.isTypeVariable());
        assertFalse(jTypeMirror4.isTypeVariable());
        assertFalse(jPrimitiveType2.isVoid());
        assertFalse(jClassType.isVoid());
        assertFalse(jPrimitiveType3.isVoid());
        assertFalse(jPrimitiveType.isVoid());
        assertFalse(jClassType2.isVoid());
        assertFalse(jPrimitiveType4.isVoid());
        assertFalse(jTypeMirror2.isVoid());
        assertFalse(jPrimitiveType5.isVoid());
        assertFalse(jPrimitiveType6.isVoid());
        assertFalse(jPrimitiveType7.isVoid());
        assertFalse(jTypeMirror.isVoid());
        assertFalse(jClassType3.isVoid());
        assertFalse(jClassType4.isVoid());
        assertFalse(jPrimitiveType8.isVoid());
        assertFalse(jWildcardType.isVoid());
        assertFalse(jTypeMirror4.isVoid());
        assertFalse(jWildcardType.isLowerBound());
        List<JMethodSig> constructors8 = jPrimitiveType2.getConstructors();
        assertTrue(constructors8.isEmpty());
        assertTrue(constructors3.isEmpty());
        assertTrue(typeAnnotations.isEmpty());
        assertTrue(symbol10.isAbstract());
        assertTrue(symbol12.isAbstract());
        assertTrue(symbol13.isAbstract());
        assertTrue(symbol14.isAbstract());
        assertTrue(symbol15.isAbstract());
        assertTrue(symbol16.isAbstract());
        assertTrue(symbol17.isAbstract());
        assertTrue(symbol18.isAbstract());
        assertTrue(symbol19.isAbstract());
        assertTrue(symbol20.isAbstract());
        assertTrue(symbol.isClass());
        assertTrue(symbol2.isClass());
        assertTrue(symbol3.isClass());
        assertTrue(symbol4.isClass());
        assertTrue(symbol5.isClass());
        assertTrue(symbol6.isClass());
        assertTrue(symbol7.isClass());
        assertTrue(symbol8.isClass());
        assertTrue(symbol9.isClass());
        assertTrue(symbol11.isClass());
        assertTrue(symbol10.isInterface());
        assertTrue(symbol12.isInterface());
        JTypeDeclSymbol symbol21 = jTypeMirror2.getSymbol();
        assertTrue(symbol21.isUnresolved());
        JTypeDeclSymbol symbol22 = jTypeMirror4.getSymbol();
        assertTrue(symbol22.isUnresolved());
        assertTrue(getResult.isConstructor());
        assertTrue(getResult2.isConstructor());
        assertTrue(getResult3.isConstructor());
        assertTrue(getResult4.isConstructor());
        assertTrue(getResult5.isConstructor());
        assertTrue(getResult6.isConstructor());
        assertTrue(jPrimitiveType4.isFloatingPoint());
        assertTrue(jPrimitiveType5.isFloatingPoint());
        assertTrue(jPrimitiveType3.isIntegral());
        assertTrue(jPrimitiveType.isIntegral());
        assertTrue(jPrimitiveType6.isIntegral());
        assertTrue(jPrimitiveType7.isIntegral());
        assertTrue(jPrimitiveType8.isIntegral());
        assertTrue(jPrimitiveType3.isNumeric());
        assertTrue(jPrimitiveType.isNumeric());
        assertTrue(jPrimitiveType4.isNumeric());
        assertTrue(jPrimitiveType5.isNumeric());
        assertTrue(jPrimitiveType6.isNumeric());
        assertTrue(jPrimitiveType7.isNumeric());
        assertTrue(jPrimitiveType8.isNumeric());
        assertTrue(jPrimitiveType2.isPrimitive());
        assertTrue(jPrimitiveType3.isPrimitive());
        assertTrue(jPrimitiveType.isPrimitive());
        assertTrue(jPrimitiveType4.isPrimitive());
        assertTrue(jPrimitiveType5.isPrimitive());
        assertTrue(jPrimitiveType6.isPrimitive());
        assertTrue(jPrimitiveType7.isPrimitive());
        assertTrue(jPrimitiveType8.isPrimitive());
        assertTrue(jTypeMirror.isBottom());
        assertTrue(boxResult2.isBoxedPrimitive());
        assertTrue(boxResult3.isBoxedPrimitive());
        assertTrue(boxResult.isBoxedPrimitive());
        assertTrue(boxResult4.isBoxedPrimitive());
        assertTrue(boxResult5.isBoxedPrimitive());
        assertTrue(boxResult6.isBoxedPrimitive());
        assertTrue(boxResult7.isBoxedPrimitive());
        assertTrue(boxResult8.isBoxedPrimitive());
        assertTrue(boxResult2.isClassOrInterface());
        assertTrue(boxResult3.isClassOrInterface());
        assertTrue(boxResult.isClassOrInterface());
        assertTrue(boxResult4.isClassOrInterface());
        assertTrue(boxResult5.isClassOrInterface());
        assertTrue(boxResult6.isClassOrInterface());
        assertTrue(boxResult7.isClassOrInterface());
        assertTrue(boxResult8.isClassOrInterface());
        assertTrue(jClassType.isClassOrInterface());
        assertTrue(jClassType2.isClassOrInterface());
        assertTrue(jClassType3.isClassOrInterface());
        assertTrue(jClassType4.isClassOrInterface());
        assertTrue(jClassType2.isInterface());
        assertTrue(jClassType4.isInterface());
        assertTrue(jClassType3.isTop());
        assertTrue(jTypeMirror3.isVoid());
        assertTrue(jWildcardType.isUnbounded());
        assertEquals(javaLanguageModule, language);
        assertEquals(declaredAnnotations, declaredAnnotations2);
        assertEquals(declaredAnnotations, declaredAnnotations3);
        assertEquals(declaredAnnotations, declaredAnnotations4);
        assertEquals(declaredAnnotations, declaredAnnotations5);
        assertEquals(declaredAnnotations, declaredAnnotations6);
        assertEquals(declaredAnnotations, declaredAnnotations7);
        assertEquals(declaredAnnotations, declaredAnnotations8);
        assertSame(bundle, ((JavaLanguageProcessor) actualCreateProcessorResult).getProperties());
        assertSame(typeSystem, jPrimitiveType2.getTypeSystem());
        assertSame(typeSystem, jPrimitiveType3.getTypeSystem());
        assertSame(typeSystem, jPrimitiveType.getTypeSystem());
        assertSame(typeSystem, jPrimitiveType4.getTypeSystem());
        assertSame(typeSystem, jPrimitiveType5.getTypeSystem());
        assertSame(typeSystem, jPrimitiveType6.getTypeSystem());
        assertSame(typeSystem, jPrimitiveType7.getTypeSystem());
        assertSame(typeSystem, jPrimitiveType8.getTypeSystem());
        assertSame(symbol, symbol.getNestRoot());
        assertSame(symbol2, symbol2.getNestRoot());
        assertSame(symbol3, symbol3.getNestRoot());
        assertSame(symbol4, symbol4.getNestRoot());
        assertSame(symbol5, symbol5.getNestRoot());
        assertSame(symbol6, symbol6.getNestRoot());
        assertSame(symbol7, symbol7.getNestRoot());
        assertSame(symbol8, symbol8.getNestRoot());
        assertSame(symbol9, symbol9.getNestRoot());
        assertSame(symbol10, symbol10.getNestRoot());
        assertSame(symbol11, symbol11.getNestRoot());
        assertSame(symbol12, symbol12.getNestRoot());
        assertSame(symbol13, symbol13.getNestRoot());
        assertSame(symbol14, symbol14.getNestRoot());
        assertSame(symbol15, symbol15.getNestRoot());
        assertSame(symbol16, symbol16.getNestRoot());
        assertSame(symbol17, symbol17.getNestRoot());
        assertSame(symbol18, symbol18.getNestRoot());
        assertSame(symbol19, symbol19.getNestRoot());
        assertSame(symbol20, symbol20.getNestRoot());
        assertSame(constructors8, symbol13.getEnumConstants());
        assertSame(constructors8, symbol14.getEnumConstants());
        assertSame(constructors8, symbol15.getEnumConstants());
        assertSame(constructors8, symbol16.getEnumConstants());
        assertSame(constructors8, symbol17.getEnumConstants());
        assertSame(constructors8, symbol18.getEnumConstants());
        assertSame(constructors8, symbol19.getEnumConstants());
        assertSame(constructors8, symbol20.getEnumConstants());
        assertSame(constructors8, symbol13.getRecordComponents());
        assertSame(constructors8, symbol14.getRecordComponents());
        assertSame(constructors8, symbol15.getRecordComponents());
        assertSame(constructors8, symbol16.getRecordComponents());
        assertSame(constructors8, symbol17.getRecordComponents());
        assertSame(constructors8, symbol18.getRecordComponents());
        assertSame(constructors8, symbol19.getRecordComponents());
        assertSame(constructors8, symbol20.getRecordComponents());
        assertSame(constructors8, jPrimitiveType3.getConstructors());
        assertSame(constructors8, jPrimitiveType.getConstructors());
        assertSame(constructors8, jPrimitiveType4.getConstructors());
        assertSame(constructors8, jTypeMirror2.getConstructors());
        assertSame(constructors8, jPrimitiveType5.getConstructors());
        assertSame(constructors8, jPrimitiveType6.getConstructors());
        assertSame(constructors8, jPrimitiveType7.getConstructors());
        assertSame(constructors8, jTypeMirror3.getConstructors());
        assertSame(constructors8, jTypeMirror.getConstructors());
        assertSame(constructors8, jPrimitiveType8.getConstructors());
        assertSame(constructors8, jWildcardType.getConstructors());
        assertSame(constructors8, jTypeMirror4.getConstructors());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol2.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol3.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol4.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol5.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol6.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol7.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol8.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol9.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol10.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol11.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol12.getEnumConstants());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol2.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol3.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol4.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol5.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol6.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol7.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol8.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol9.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol10.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol11.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, symbol12.getRecordComponents());
        assertSame((ConsPStack<JMethodSig>) constructors3, jClassType4.getConstructors());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol9.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol10.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol11.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol12.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol13.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol14.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol15.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol16.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol17.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol18.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol19.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol20.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol21.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jTypeMirror3.getSymbol().getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol22.getDeclaredAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol2.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol3.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol4.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol5.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol6.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol7.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol8.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol9.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol10.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol11.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol12.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol13.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol14.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol15.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol16.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol17.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol18.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol19.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, symbol20.getAnnotationAttributeNames());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jPrimitiveType3.getTypeAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jPrimitiveType.getTypeAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jPrimitiveType4.getTypeAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jPrimitiveType5.getTypeAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jPrimitiveType6.getTypeAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jPrimitiveType7.getTypeAnnotations());
        assertSame((MapPSet<SymbolicValue.SymAnnot>) typeAnnotations, jPrimitiveType8.getTypeAnnotations());
        assertSame(language, languageVersion.getLanguage());
    }

    /**
     * Method under test:
     * {@link JavaLanguageModule#createCpdLexer(LanguagePropertyBundle)}
     */
    @Test
    void testCreateCpdLexer() throws IOException {
        // Arrange
        JavaLanguageModule javaLanguageModule = new JavaLanguageModule();

        // Act
        CpdLexer actualCreateCpdLexerResult = javaLanguageModule.createCpdLexer(new JavaLanguageProperties());
        TextDocument textDocument = mock(TextDocument.class);
        when(textDocument.getLength()).thenReturn(3);
        when(textDocument.getText()).thenReturn(Chars.EMPTY);
        actualCreateCpdLexerResult.tokenize(textDocument, mock(TokenFactory.class));

        // Assert
        verify(textDocument).getLength();
        verify(textDocument, atLeast(1)).getText();
        assertTrue(actualCreateCpdLexerResult instanceof JavaCpdLexer);
    }

    /**
     * Method under test: default or parameterless constructor of
     * {@link JavaLanguageModule}
     */
    @Test
    void testNewJavaLanguageModule() {
        // Arrange and Act
        JavaLanguageModule actualJavaLanguageModule = new JavaLanguageModule();

        // Assert
        List<LanguageVersion> versions = actualJavaLanguageModule.getVersions();
        assertEquals(23, versions.size());
        LanguageVersion getResult = versions.get(0);
        assertEquals("1.3", getResult.getVersion());
        LanguageVersion getResult2 = versions.get(1);
        assertEquals("1.4", getResult2.getVersion());
        LanguageVersion getResult3 = versions.get(2);
        assertEquals("1.5", getResult3.getVersion());
        LanguageVersion getResult4 = versions.get(20);
        assertEquals("22-preview", getResult4.getVersion());
        LanguageVersion defaultVersion = actualJavaLanguageModule.getDefaultVersion();
        assertEquals("23", defaultVersion.getVersion());
        LanguageVersion latestVersion = actualJavaLanguageModule.getLatestVersion();
        assertEquals("23-preview", latestVersion.getVersion());
        assertEquals("Java 1.3", getResult.getName());
        assertEquals("Java 1.3", getResult.getShortName());
        assertEquals("Java 1.4", getResult2.getName());
        assertEquals("Java 1.4", getResult2.getShortName());
        assertEquals("Java 1.5", getResult3.getName());
        assertEquals("Java 1.5", getResult3.getShortName());
        assertEquals("Java 22-preview", getResult4.getName());
        assertEquals("Java 22-preview", getResult4.getShortName());
        assertEquals("Java 23", defaultVersion.getName());
        assertEquals("Java 23", defaultVersion.getShortName());
        assertEquals("Java 23-preview", latestVersion.getName());
        assertEquals("Java 23-preview", latestVersion.getShortName());
        assertEquals("Java", actualJavaLanguageModule.getName());
        assertEquals("Java", actualJavaLanguageModule.getShortName());
        assertEquals("java 1.3", getResult.getTerseName());
        assertEquals("java 1.4", getResult2.getTerseName());
        assertEquals("java 1.5", getResult3.getTerseName());
        assertEquals("java 22-preview", getResult4.getTerseName());
        assertEquals("java 23", defaultVersion.getTerseName());
        assertEquals("java 23-preview", latestVersion.getTerseName());
        List<String> extensions = actualJavaLanguageModule.getExtensions();
        assertEquals(1, extensions.size());
        assertEquals("java", extensions.get(0));
        assertEquals("java", actualJavaLanguageModule.getId());
        Set<String> versionNamesAndAliases = actualJavaLanguageModule.getVersionNamesAndAliases();
        assertEquals(29, versionNamesAndAliases.size());
        assertTrue(versionNamesAndAliases.contains("10"));
        assertTrue(versionNamesAndAliases.contains("11"));
        assertTrue(versionNamesAndAliases.contains("12"));
        assertTrue(versionNamesAndAliases.contains("13"));
        assertTrue(versionNamesAndAliases.contains("22"));
        assertTrue(versionNamesAndAliases.contains("23"));
        assertTrue(actualJavaLanguageModule.getDependencies().isEmpty());
        assertSame(actualJavaLanguageModule, getResult.getLanguage());
        assertSame(actualJavaLanguageModule, getResult2.getLanguage());
        assertSame(actualJavaLanguageModule, getResult3.getLanguage());
        assertSame(actualJavaLanguageModule, getResult4.getLanguage());
        assertSame(actualJavaLanguageModule, latestVersion.getLanguage());
        assertSame(actualJavaLanguageModule, defaultVersion.getLanguage());
        assertSame(latestVersion, versions.get(22));
        assertSame(defaultVersion, versions.get(21));
    }
}
